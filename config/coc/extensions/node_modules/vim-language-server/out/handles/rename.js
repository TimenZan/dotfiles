"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var vscode_languageserver_1 = require("vscode-languageserver");
var documents_1 = require("../server/documents");
var util_1 = require("../common/util");
var workspaces_1 = require("../server/workspaces");
exports.prepareProvider = function (params) {
    var textDocument = params.textDocument, position = params.position;
    var doc = documents_1.documents.get(textDocument.uri);
    if (!doc) {
        return null;
    }
    var words = util_1.getWordFromPosition(doc, position);
    if (!words) {
        return null;
    }
    var currentName = words.word;
    if (/\./.test(words.right)) {
        var tail = words.right.replace(/^[^.]*(\.)/, '$1');
        currentName = words.word.replace(tail, '');
    }
    return {
        range: vscode_languageserver_1.Range.create(vscode_languageserver_1.Position.create(position.line, position.character - words.left.length), vscode_languageserver_1.Position.create(position.line, position.character + words.right.length - 1)),
        placeholder: currentName
    };
};
exports.renameProvider = function (params) {
    var textDocument = params.textDocument, position = params.position, newName = params.newName;
    var doc = documents_1.documents.get(textDocument.uri);
    if (!doc) {
        return null;
    }
    var words = util_1.getWordFromPosition(doc, position);
    if (!words) {
        return null;
    }
    var currentName = words.word;
    if (/\./.test(words.right)) {
        var tail = words.right.replace(/^[^.]*(\.)/, '$1');
        currentName = words.word.replace(tail, '');
    }
    var changes = {};
    var isChange = false;
    workspaces_1.workspace.getLocations(currentName, doc.uri, position, 'definition').locations
        .forEach(function (l) {
        isChange = true;
        if (!changes[l.uri] || !Array.isArray(changes[l.uri])) {
            changes[l.uri] = [];
        }
        changes[l.uri].push({
            newText: /^a:/.test(newName) ? newName.slice(2) : newName,
            range: l.range
        });
    });
    var refs = workspaces_1.workspace.getLocations(currentName, doc.uri, position, 'references');
    refs.locations.forEach(function (l) {
        isChange = true;
        if (!changes[l.uri] || !Array.isArray(changes[l.uri])) {
            changes[l.uri] = [];
        }
        changes[l.uri].push({
            newText: refs.isFunArg ? "a:" + newName : newName,
            range: l.range
        });
    });
    if (isChange) {
        return {
            changes: changes
        };
    }
    return null;
};
//# sourceMappingURL=rename.js.map