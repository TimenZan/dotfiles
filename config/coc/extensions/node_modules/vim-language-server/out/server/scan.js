"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var os_1 = tslib_1.__importDefault(require("os"));
var rxjs_1 = require("rxjs");
var fast_glob_1 = tslib_1.__importDefault(require("fast-glob"));
var path_1 = require("path");
var operators_1 = require("rxjs/operators");
var vscode_uri_1 = tslib_1.__importDefault(require("vscode-uri"));
var fs_1 = require("fs");
var util_1 = require("../common/util");
var constant_1 = require("../common/constant");
var source$ = new rxjs_1.Subject();
var indexs = {};
source$.pipe(operators_1.mergeMap(function (uri) {
    return rxjs_1.from(util_1.findWorkDirectory(vscode_uri_1.default.parse(uri).fsPath, constant_1.workDirPatterns)).pipe(operators_1.filter(function (workDir) { return workDir && workDir !== os_1.default.homedir(); }), operators_1.map(function (workDir) { return ({
        uri: uri,
        workDir: workDir
    }); }));
}), operators_1.filter(function (_a) {
    var workDir = _a.workDir;
    if (!indexs[workDir]) {
        indexs[workDir] = true;
        return true;
    }
    return false;
}), operators_1.concatMap(function (_a) {
    var workDir = _a.workDir;
    return rxjs_1.from(fast_glob_1.default([path_1.join(workDir, '**/*.vim'), '!**/node_modules/**'])).pipe(operators_1.filter(function (list) { return list && list.length > 0; }), operators_1.switchMap(function (list) {
        return rxjs_1.of.apply(void 0, list);
    }), operators_1.mergeMap(function (fpath) {
        var content = fs_1.readFileSync(fpath).toString();
        return rxjs_1.from(util_1.handleParse(content)).pipe(operators_1.filter(function (res) { return res[0] !== null; }), operators_1.map(function (res) { return ({
            node: res[0],
            uri: vscode_uri_1.default.file(fpath).toString()
        }); }), operators_1.catchError(function (error) {
            process.send({
                log: fpath + ":\n" + (error.stack || error.message || error)
            });
            return rxjs_1.of(undefined);
        }));
    }, 3));
}), operators_1.filter(function (res) { return res; })).subscribe(function (res) {
    process.send({
        data: res
    });
}, function (error) {
    process.send({
        log: error.stack || error.message || error
    });
});
process.on('message', function (mess) {
    var uri = mess.uri;
    if (uri) {
        source$.next(uri);
    }
});
//# sourceMappingURL=scan.js.map