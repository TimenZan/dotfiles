"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var workspaces_1 = require("../../server/workspaces");
var config_1 = tslib_1.__importDefault(require("../../server/config"));
var util_1 = require("../../common/util");
var patterns_1 = require("../../common/patterns");
var builtin_1 = require("../../server/builtin");
var provider_1 = require("./provider");
function provider(line, uri, position) {
    if (/\b(g:|s:|<SID>)\w*$/.test(line)) {
        var list = [];
        if (/\bg:\w*$/.test(line)) {
            list = workspaces_1.workspace.getFunctionItems(uri)
                .filter(function (item) { return /^g:/.test(item.label); });
        }
        else if (/\b(s:|<SID>)\w*$/i.test(line)) {
            list = workspaces_1.workspace.getFunctionItems(uri)
                .filter(function (item) { return /^s:/.test(item.label); });
        }
        return list.map(function (item) { return (tslib_1.__assign({}, item, { insertText: !/:/.test(config_1.default.iskeyword) ? item.insertText.slice(2) : item.insertText })); });
    }
    else if (/\B:\w*$/.test(line)) {
        return workspaces_1.workspace.getFunctionItems(uri)
            .filter(function (item) { return /:/.test(item.label); })
            .map(function (item) {
            var m = line.match(/:[^:]*$/);
            return tslib_1.__assign({}, item, { 
                // delete the `:` symbol
                textEdit: {
                    range: {
                        start: {
                            line: position.line,
                            character: line.length - m[0].length
                        },
                        end: {
                            line: position.line,
                            character: line.length - m[0].length + 1
                        }
                    },
                    newText: item.insertText
                } });
        });
    }
    else if (util_1.isSomeMatchPattern(patterns_1.notFunctionPattern, line)) {
        return [];
    }
    return workspaces_1.workspace.getFunctionItems(uri)
        .filter(function (item) {
        return !builtin_1.builtinDocs.isBuiltinFunction(item.label);
    })
        .concat(builtin_1.builtinDocs.getBuiltinVimFunctions());
}
provider_1.useProvider(provider);
//# sourceMappingURL=function.js.map