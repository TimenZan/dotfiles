"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var vscode_uri_1 = tslib_1.__importDefault(require("vscode-uri"));
var buffer_1 = require("./buffer");
var util_1 = require("../common/util");
var vscode_languageserver_1 = require("vscode-languageserver");
// import logger from '../common/logger';
// const log = logger('workspace')
var Workspace = /** @class */ (function () {
    function Workspace() {
        this.buffers = {};
    }
    Workspace.prototype.filterDuplicate = function (items) {
        var tmp = {};
        return items.reduce(function (res, next) {
            if (!tmp[next.label]) {
                tmp[next.label] = true;
                res.push(next);
            }
            return res;
        }, []);
    };
    Workspace.prototype.getGlobalFunctionItems = function (uri) {
        var buf = this.buffers[uri];
        if (!buf) {
            return [];
        }
        return this.filterDuplicate(Object.values(this.buffers)
            .filter(function (b) { return b.isBelongToWorkdir(buf.getWorkDir()); })
            .reduce(function (res, buf) {
            return res.concat(buf.getGlobalFunctionItems());
        }, []));
    };
    Workspace.prototype.getScriptFunctionItems = function (uri) {
        if (!this.buffers[uri]) {
            return [];
        }
        return this.buffers[uri].getScriptFunctionItems();
    };
    Workspace.prototype.getGlobalIdentifierItems = function (uri) {
        var buf = this.buffers[uri];
        if (!buf) {
            return [];
        }
        return this.filterDuplicate(Object.values(this.buffers)
            .filter(function (b) { return b.isBelongToWorkdir(buf.getWorkDir()); })
            .reduce(function (res, buf) {
            return res
                .concat(buf.getGlobalIdentifierItems())
                .concat(buf.getEnvItems());
        }, []));
    };
    Workspace.prototype.getLocalIdentifierItems = function (uri, line) {
        if (!this.buffers[uri]) {
            return [];
        }
        var buf = this.buffers[uri];
        return buf.getFunctionLocalIdentifierItems(line)
            .concat(buf.getLocalIdentifierItems());
    };
    Workspace.prototype.getLocation = function (uri, item) {
        return {
            uri: uri,
            range: vscode_languageserver_1.Range.create(vscode_languageserver_1.Position.create(item.startLine - 1, item.startCol - 1), vscode_languageserver_1.Position.create(item.startLine - 1, item.startCol - 1 + item.name.length))
        };
    };
    Workspace.prototype.getGlobalLocaltion = function (name, _uri, _position, locationType) {
        var _this = this;
        var res = [];
        Object.keys(this.buffers).forEach(function (uri) {
            var gloalFunctions = locationType === 'definition'
                ? _this.buffers[uri].getGlobalFunctions()
                : _this.buffers[uri].getGlobalFunctionRefs();
            Object.keys(gloalFunctions).forEach(function (fname) {
                if (fname === name) {
                    res = res.concat(gloalFunctions[fname].map(function (item) { return _this.getLocation(uri, item); }));
                }
            });
            var tmp = [];
            var list = [];
            var identifiers = locationType === 'definition'
                ? _this.buffers[uri].getGlobalIdentifiers()
                : _this.buffers[uri].getGlobalIdentifierRefs();
            Object.keys(identifiers).forEach(function (fname) {
                if (fname === name) {
                    tmp = tmp.concat(identifiers[fname].map(function (item) { return _this.getLocation(uri, item); }));
                }
            });
            // filter function local variables
            if (/^([a-zA-Z](\.\w+)*|[a-zA-Z]\w+(\.\w+)*)$/.test(name)) {
                var gloalFunctions_1 = _this.buffers[uri].getGlobalFunctions();
                var scriptFunctions = _this.buffers[uri].getScriptFunctions();
                var funList_1 = Object.values(gloalFunctions_1).concat(Object.values(scriptFunctions)).reduce(function (res, fs) { return res.concat(fs); }, []);
                tmp.forEach(function (l) {
                    if (!funList_1.some(function (fun) {
                        return fun.startLine - 1 < l.range.start.line && l.range.start.line < fun.endLine - 1;
                    })) {
                        list.push(l);
                    }
                });
            }
            else {
                list = tmp;
            }
            res = res.concat(list);
        });
        return res;
    };
    Workspace.prototype.getScriptLocation = function (names, uri, _position, locationType) {
        var _this = this;
        var res = [];
        var functions = locationType === 'definition'
            ? this.buffers[uri].getScriptFunctions()
            : this.buffers[uri].getScriptFunctionRefs();
        Object.keys(functions).forEach(function (fname) {
            var idx = names.indexOf(fname);
            if (idx !== -1) {
                res = res.concat(functions[names[idx]].map(function (item) { return _this.getLocation(uri, item); }));
            }
        });
        var identifiers = locationType === 'definition'
            ? this.buffers[uri].getLocalIdentifiers()
            : this.buffers[uri].getLocalIdentifierRefs();
        Object.keys(identifiers).forEach(function (fname) {
            var idx = names.indexOf(fname);
            if (idx !== -1) {
                res = res.concat(identifiers[names[idx]].map(function (item) { return _this.getLocation(uri, item); }));
            }
        });
        return res;
    };
    Workspace.prototype.getLocalLocation = function (name, uri, position, locationType) {
        var _this = this;
        var list = [];
        var vimLineNum = position.line + 1;
        var startLine = -1;
        var endLine = -1;
        []
            .concat(Object
            .values(this.buffers[uri].getGlobalFunctions())
            .reduce(function (res, next) { return res.concat(next); }, []))
            .concat(Object
            .values(this.buffers[uri].getScriptFunctions())
            .reduce(function (res, next) { return res.concat(next); }, []))
            .forEach(function (fun) {
            if (fun.startLine < vimLineNum && vimLineNum < fun.endLine) {
                startLine = fun.startLine;
                endLine = fun.endLine;
            }
        });
        if (startLine !== -1 && endLine !== -1) {
            var globalVariables_1 = locationType === 'definition'
                ? this.buffers[uri].getGlobalIdentifiers()
                : this.buffers[uri].getGlobalIdentifierRefs();
            Object.keys(globalVariables_1).some(function (key) {
                if (key === name) {
                    globalVariables_1[key].forEach(function (item) {
                        if (startLine < item.startLine && item.startLine < endLine) {
                            list.push(_this.getLocation(uri, item));
                        }
                    });
                    return true;
                }
                return false;
            });
            var localVariables_1 = locationType === 'definition'
                ? this.buffers[uri].getLocalIdentifiers()
                : this.buffers[uri].getLocalIdentifierRefs();
            Object.keys(localVariables_1).some(function (key) {
                if (key === name) {
                    localVariables_1[key].forEach(function (item) {
                        if (startLine < item.startLine && item.startLine < endLine) {
                            list.push(_this.getLocation(uri, item));
                        }
                    });
                    return true;
                }
                return false;
            });
        }
        return list;
    };
    Workspace.prototype.getAIdentifierLocation = function (name, uri, position, locationType) {
        var res = [];
        if (locationType === 'definition') {
            var flist_1 = [];
            var globalFunctions_1 = this.buffers[uri].getGlobalFunctions();
            Object.keys(globalFunctions_1).forEach(function (fname) {
                globalFunctions_1[fname].forEach(function (item) {
                    if (item.startLine - 1 < position.line && position.line < item.endLine - 1) {
                        flist_1.push(item);
                    }
                });
            });
            var scriptFunctions_1 = this.buffers[uri].getScriptFunctions();
            Object.keys(scriptFunctions_1).forEach(function (fname) {
                scriptFunctions_1[fname].forEach(function (item) {
                    if (item.startLine - 1 < position.line && position.line < item.endLine - 1) {
                        flist_1.push(item);
                    }
                });
            });
            if (flist_1.length) {
                var n_1 = name.slice(2);
                return flist_1.filter(function (item) { return item.args && item.args.some(function (item) { return item.value === n_1; }); })
                    .map(function (item) {
                    var startLine = item.startLine - 1;
                    var startCol = item.startCol - 1;
                    var endCol = item.startCol - 1;
                    item.args.some(function (arg) {
                        if (arg.value === n_1) {
                            startCol = arg.pos.col - 1;
                            endCol = startCol + n_1.length;
                            return true;
                        }
                        return false;
                    });
                    return {
                        uri: uri,
                        range: vscode_languageserver_1.Range.create(vscode_languageserver_1.Position.create(startLine, startCol), vscode_languageserver_1.Position.create(startLine, endCol))
                    };
                });
            }
        }
        else {
            var flist_2 = [];
            var globalFunctions_2 = this.buffers[uri].getGlobalFunctions();
            Object.keys(globalFunctions_2).forEach(function (fname) {
                globalFunctions_2[fname].forEach(function (item) {
                    if (item.startLine - 1 < position.line && position.line < item.endLine - 1) {
                        flist_2.push(item);
                    }
                });
            });
            var scriptFunctions_2 = this.buffers[uri].getScriptFunctions();
            Object.keys(scriptFunctions_2).forEach(function (fname) {
                scriptFunctions_2[fname].forEach(function (item) {
                    if (item.startLine - 1 < position.line && position.line < item.endLine - 1) {
                        flist_2.push(item);
                    }
                });
            });
            if (flist_2.length) {
                var identifiers_1 = this.buffers[uri].getLocalIdentifierRefs();
                Object.keys(identifiers_1).forEach(function (key) {
                    if (key === name) {
                        identifiers_1[name].forEach(function (item) {
                            flist_2.forEach(function (fitem) {
                                if (fitem.startLine < item.startLine && item.startLine < fitem.endLine) {
                                    res.push({
                                        uri: uri,
                                        range: vscode_languageserver_1.Range.create(vscode_languageserver_1.Position.create(item.startLine - 1, item.startCol - 1), vscode_languageserver_1.Position.create(item.startLine - 1, item.startCol - 1 + item.name.length))
                                    });
                                }
                            });
                        });
                    }
                });
            }
        }
        return res;
    };
    Workspace.prototype.getFunArgLocation = function (name, uri, position, locationType) {
        var res = [];
        if (locationType === 'references') {
            var globalFunctions = this.buffers[uri].getGlobalFunctions();
            var scriptFunctions = this.buffers[uri].getScriptFunctions();
            var startLine_1 = -1;
            var endLine_1 = -1;
            Object.values(globalFunctions).forEach(function (fitems) {
                fitems.forEach(function (fitem) {
                    fitem.args.forEach(function (arg) {
                        var pos = arg.pos;
                        if (pos) {
                            if (pos.lnum === position.line + 1 && arg.value === name) {
                                startLine_1 = fitem.startLine;
                                endLine_1 = fitem.endLine;
                            }
                        }
                    });
                });
            });
            if (startLine_1 === -1 && endLine_1 === -1) {
                Object.values(scriptFunctions).forEach(function (fitems) {
                    fitems.forEach(function (fitem) {
                        fitem.args.forEach(function (arg) {
                            var pos = arg.pos;
                            if (pos) {
                                if (pos.lnum === position.line + 1 && arg.value === name) {
                                    startLine_1 = fitem.startLine;
                                    endLine_1 = fitem.endLine;
                                }
                            }
                        });
                    });
                });
            }
            if (startLine_1 !== -1 && endLine_1 !== -1) {
                var identifiers_2 = this.buffers[uri].getLocalIdentifierRefs();
                Object.keys(identifiers_2).forEach(function (key) {
                    if (key === "a:" + name) {
                        identifiers_2[key].forEach(function (item) {
                            if (startLine_1 < item.startLine && item.startLine < endLine_1) {
                                res.push({
                                    uri: uri,
                                    range: vscode_languageserver_1.Range.create(vscode_languageserver_1.Position.create(item.startLine - 1, item.startCol - 1), vscode_languageserver_1.Position.create(item.startLine - 1, item.startCol - 1 + item.name.length))
                                });
                            }
                        });
                    }
                });
            }
        }
        else {
            var flist_3 = [];
            var globalFunctions_3 = this.buffers[uri].getGlobalFunctions();
            Object.keys(globalFunctions_3).forEach(function (fname) {
                globalFunctions_3[fname].forEach(function (item) {
                    if (item.startLine - 1 === position.line && position.character > item.startCol - 1) {
                        flist_3.push(item);
                    }
                });
            });
            var scriptFunctions_3 = this.buffers[uri].getScriptFunctions();
            Object.keys(scriptFunctions_3).forEach(function (fname) {
                scriptFunctions_3[fname].forEach(function (item) {
                    if (item.startLine - 1 === position.line && position.character > item.startCol - 1) {
                        flist_3.push(item);
                    }
                });
            });
            if (flist_3.length) {
                return flist_3.filter(function (item) { return item.args && item.args.some(function (item) { return item.value === name; }); })
                    .map(function (item) {
                    var startLine = item.startLine - 1;
                    var startCol = item.startCol - 1;
                    var endCol = item.startCol - 1;
                    item.args.some(function (arg) {
                        if (arg.value === name) {
                            startCol = arg.pos.col - 1;
                            endCol = startCol + name.length;
                            return true;
                        }
                        return false;
                    });
                    return {
                        uri: uri,
                        range: vscode_languageserver_1.Range.create(vscode_languageserver_1.Position.create(startLine, startCol), vscode_languageserver_1.Position.create(startLine, endCol))
                    };
                });
            }
        }
        return res;
    };
    Workspace.prototype.isExistsBuffer = function (uri) {
        if (this.buffers[uri]) {
            return true;
        }
        return false;
    };
    Workspace.prototype.updateBuffer = function (uri, node) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var workDir;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!node) {
                            return [2 /*return*/];
                        }
                        if (!this.buffers[uri]) return [3 /*break*/, 1];
                        this.buffers[uri].updateBufferByNode(node);
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, util_1.findWorkDirectory(vscode_uri_1.default.parse(uri).fsPath, ['.git', 'autoload', 'plugin'])];
                    case 2:
                        workDir = _a.sent();
                        this.buffers[uri] = new buffer_1.Buffer(uri, workDir, node);
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    Workspace.prototype.getFunctionItems = function (uri) {
        return this.getScriptFunctionItems(uri).concat(this.getGlobalFunctionItems(uri));
    };
    Workspace.prototype.getIdentifierItems = function (uri, line) {
        return this.getLocalIdentifierItems(uri, line)
            .concat(this.getGlobalIdentifierItems(uri));
    };
    Workspace.prototype.getLocations = function (name, uri, position, locationType) {
        var isFunArg = false;
        var res = [];
        if (/^((g|b):\w+(\.\w+)*|\w+(#\w+)+)$/.test(name)) {
            res = this.getGlobalLocaltion(name, uri, position, locationType);
        }
        else if (/^([a-zA-Z](\.\w+)*|[a-zA-Z]\w+(\.\w+)*)$/.test(name)) {
            // get function args references first
            res = this.getFunArgLocation(name, uri, position, locationType);
            if (res.length) {
                isFunArg = true;
            }
            else {
                res = this.getLocalLocation(name, uri, position, locationType);
                if (!res.length) {
                    res = this.getGlobalLocaltion(name, uri, position, locationType);
                }
            }
        }
        else if (/^((s:|<SID>)\w+(\.\w+)*)$/.test(name) && this.buffers[uri]) {
            var names = [name];
            if (/^<SID>/.test(name)) {
                names.push(name.replace(/^<SID>/, 's:'));
            }
            else {
                names.push(name.replace(/^s:/, '<SID>'));
            }
            res = this.getScriptLocation(names, uri, position, locationType);
        }
        else if (/^(l:\w+(\.\w+)*)$/.test(name) && this.buffers[uri]) {
            res = this.getLocalLocation(name, uri, position, locationType);
        }
        else if (/^(a:\w+(\.\w+)*)$/.test(name) && this.buffers[uri]) {
            res = this.getAIdentifierLocation(name, uri, position, locationType);
        }
        if (res.length) {
            res = res.sort(function (a, b) {
                if (a.range.start.line === b.range.start.line) {
                    return a.range.start.character - b.range.start.character;
                }
                return a.range.start.line - b.range.start.line;
            });
        }
        return {
            isFunArg: isFunArg,
            locations: res
        };
    };
    return Workspace;
}());
exports.Workspace = Workspace;
exports.workspace = new Workspace();
//# sourceMappingURL=workspaces.js.map